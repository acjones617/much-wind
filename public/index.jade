doctype html
html
  head
    title &#39;MURICA
    meta(name="viewport", content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black")

    link(rel='stylesheet', href='//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.1/normalize.min.css')
    link(rel='stylesheet', href='//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.css')
    link(rel='stylesheet', href='/stylesheets/client.css')

    link(rel="icon", type="image/png", href="images/icon.png")
    script(src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js")
    script(src="//cdnjs.cloudflare.com/ajax/libs/jquery-color/2.1.2/jquery.color.min.js")
    script(src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js")
    script(src="//cdnjs.cloudflare.com/ajax/libs/pusher/2.1.6/pusher.min.js")
    script(src="//cdn.jsdelivr.net/physicsjs/0.6.0/physicsjs.full.min.js")
    script(src="./javascript/visualizers/murica/murica.js")

  body
    header
      h1.title &#39;MURICA
      iframe(src="https://archive.org/embed/TheStarSpangledBannerInstrumental", width="500", height="30", frameborder="0", webkitallowfullscreen="true", mozallowfullscreen="true", allowfullscreen)

    // img(src="images/fireworks.gif", width="800", height="400", style="position: fixed; bottom: 0px; left: 50px")
    div#pole
    // button#fireworks firework

    canvas(id="viewport" class="pjs-layer-main" width="489" height="802" style="position: absolute; z-index: 1;")

    footer
      p Happy 4th ya&#39;ll

    // div#firework

    script.
      //var ClientSpace = {};
      var fireX = 200;
      var fireY = 0;

      $('body').on('touchmove', '.scrollable', function(e) {
        e.stopPropagation();
      });

      var fire = function(fireX, fireY, domEl) {
        setTimeout(function() {
          if (fireX <= 222) {
            fireX += 0.3;
            fireY = 300-(fireX-220)*(fireX-220);
            // $('#firework').animate({"bottom": fireY+'px'});
            domEl.css({
              position: 'absolute',
              left: fireX,
              bottom: fireY
            });
            fire(fireX, fireY, domEl);
          }
        }, 50)
      }
      $('#fireworks').on('click', function(e) {
        console.log('firework???');
        e.stopPropagation();
        // var circle = $('body').append('div.firework')
        fire(200, 0, $('#firework'));
      });

      //
      // Tearable Cloth
      //
      Physics(function (world) {

          var viewWidth = window.innerWidth
              ,viewHeight = window.innerHeight
              // bounds of the window
              ,viewportBounds = Physics.aabb(0, 0, viewWidth, viewHeight)
              ,edgeBounce
              ,renderer
              ;

          // create a renderer
          renderer = Physics.renderer('canvas', {
              el: 'viewport'
              ,width: viewWidth
              ,height: viewHeight
          });

          // add the renderer
          world.add(renderer);
          // render on each step
          world.on('step', function () {
              world.render();
          });

          // constrain objects to these bounds
          edgeBounce = Physics.behavior('edge-collision-detection', {
              aabb: viewportBounds
              ,restitution: 0.2
              ,cof: 0.8
          });

          // resize events
          window.addEventListener('resize', function () {

              viewWidth = window.innerWidth;
              viewHeight = window.innerHeight;

              renderer.el.width = viewWidth;
              renderer.el.height = viewHeight;

              viewportBounds = Physics.aabb(0, 0, viewWidth, viewHeight);
              // update the boundaries
              edgeBounce.setAABB(viewportBounds);

          }, true);

          // for constraints
          var rigidConstraints = Physics.behavior('verlet-constraints', {
              iterations: 1
          });

          // the "cloth"
          var cloth = [];
          var colors = ['#BF1238', 'white'];
          for ( var row = 0, l = 26; row < l; ++row ){
              for ( var col = 0, lcol = 26; col < lcol; ++col ){
                  var fillStyle;
                  if (row > 10 || col > 13) {
                    fillStyle = colors[Math.floor(col/2) % 2];
                  } else {
                    if ((row > 0 && row < 10) && (col > 0 && col < 13) &&
                      ((row % 2 === 1 && col % 4 === 2) || (row % 2 === 0 && col % 4 === 0))) {
                      fillStyle = 'white';
                    } else {
                      fillStyle = '#002469';
                    }
                  }

                  cloth.push(
                      Physics.body('circle', {
                          y: 10 * col + (viewHeight + 20- l * 10) / 2
                          ,x: 10 * row + (viewWidth/2 + 25)
                          ,radius: 10
                          ,hidden: false,
                          styles: {
                              fillStyle: fillStyle
                          }
                      })
                  );

                  if (col > 0){
                      // horizontal
                      rigidConstraints.distanceConstraint(cloth[ lcol * row + col - 1 ], cloth[ lcol * row + col ], 0.45);
                  }

                  if (row > 0){

                      // vertical
                      rigidConstraints.distanceConstraint(cloth[ lcol * row + col ], cloth[ lcol * (row - 1) + col ], 0.5);
                  } else {

                      cloth[ lcol * row + col ].treatment = 'static';
                  }
              }
          }

          world.on('integrate:positions', function(){

              var constraints = rigidConstraints.getConstraints().distanceConstraints
                  ,c
                  ,threshold = Infinity
                  ,scratch = Physics.scratchpad()
                  ,v = scratch.vector()
                  ,len
                  ;

              for ( var i = 0, l = constraints.length; i < l; ++i ){

                  c = constraints[ i ];
                  len = v.clone( c.bodyB.state.pos ).vsub( c.bodyA.state.pos ).norm();

                  // break the constraint if above threshold
                  if ( (c.bodyA.treatment !== 'static' && c.bodyB.treatment !== 'static') && (len - c.targetLength) > threshold ){

                      rigidConstraints.remove( c );
                  }
              }

              scratch.done();
              // higher priority than constraint resolution
          }, null, 100);
          // add things to world
          world.add( cloth );

          world.add( rigidConstraints );

          // add some fun interaction
          var attractor = Physics.behavior('attractor', {
              order: 0,
              strength: 0.001
          });
          window.attractor = attractor;
          window.world = world;
          world.on({
              'interact:poke': function( pos ){
                  attractor.position( pos );
                  world.add( attractor );
              }
              ,'interact:move': function( pos ){
                  attractor.position( pos );
              }
              ,'interact:release': function(){
                  world.remove( attractor );
              }
          });

          // attractor.position({x: 400, y: 250});
          // world.add(attractor);

          // add things to the world
          world.add([
              Physics.behavior('interactive', { el: renderer.el, moveThrottle: 20 })
              ,Physics.behavior('constant-acceleration', {acc: { x: 0, y: 0.0002 }})
              ,Physics.behavior('body-collision-detection')
              //,edgeBounce
          ]);

          // subscribe to ticker to advance the simulation
          Physics.util.ticker.on(function( time ) {
              world.step( time );
          });

          // start the ticker
          Physics.util.ticker.start();
      });
